---
title: "Final Report"
author: "Ryan Hu, Oleks Gorpynich, JB Diei, Nick Li"
format:
  html:
    embed-resources: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
code-fold: true
bibliography: references.bib
---

## Data

We are exploring the relationship between child mortality and average daily income.

**Child Mortality Data:** In the case of child mortality, our data source provides the number of deaths of children under 5 years of age per 1000 live births for a specific country during a particular year. We have data for the years 1800 to 2100. There are three separate sources for this data, depending on the year (@gapminder).

-   **1800–1950 (and intermittently beyond):** Data comes from Gapminder version 7, assembled by Klara Johansson and Mattias Lindgren. It draws primarily on mortality.org and Brian R. Mitchell’s International Historical Statistics. Infant mortality estimates were statistically converted into child mortality figures.

-   **1950–2016:** The UN Inter‐agency Group for Child Mortality Estimation (UN IGME)—a partnership of UNICEF, WHO, the UN Population Division, and the World Bank—produced these estimates. Their publicly released country and global child-mortality series (available at childmortality.org) extend back to 1950 for some nations, cover 1960 for about half, and span 1970–2018 for 70% of all countries.

-   **1950–2100:** The UN’s World Population Prospects 2019 provides harmonized annual child mortality rates for every country including both historical values and projections through 2100.

**Daily Income Data:**

For the average daily income, we analyze the survey-derived average daily household income or consumption per person, adjusted to 2017 prices in constant international dollars (PPP). Similarly, there are different sources for different years, and we also have data for the years 1800 to 2100 (@gapminder).

-   **1981-2019:** Data is collected from the World Bank. For the countries missing from the World Bank, the number is estimated using the mean income based on the country's GDP per capita. That data itself also has many sources, including the World Bank, Maddison Project Database, and IMF.

-   **1800-1981 and 2019-2100:** These numbers are estimated using the growth rates of the constant dollar GDP per capita. These are rough estimates.

## Hypthosize Data

We hypothesize that there is a strong negative correlation between average daily income and child mortality rates across countries and over time. Specifically, we expect as average daily income increases, child mortality rates will decrease. We suspect this because higher household income is usually associated with better access to healthcare, nutrition, cleaner living environments, and higher levels of education. All of these are factors that could contribute to reducing child mortality. In wealthier households or areas, families are more likely to afford vaccinations, clean water, and nutritious food, therefore potentially reducing the likelihood of children dying (@social_determinants_of_health). Conversely, in low-income areas, limited access to healthcare, malnutrition, and lack of health education could contribute significantly to higher child mortality rates (@udalova_association_2022).

## Data Cleaning Process

**Setup and Imports**

```{r setup}
library(tidyverse)
library(knitr)
library(gganimate)
library(gifski)
library(broom)
library(kableExtra)
child <- read.csv("data/mincpcap_cppp.csv")
income <- read.csv("data/child_mortality_0_5_year_olds_dying_per_1000_born.csv")
```

**Data inspection**

Looking at the length of each data set, the income data has 2 additional observations, indicating that there are two additional countries included in the income data, lets look at which countries those are.

```{r}
income$country[!(income$country %in% child$country)]
```

Since the child mortality data set doesn't contain these countries, we will drop Liechtenstein and Holy See in the join process later on.

**Column names**

Now we are removing the X character that was appended onto every year in the table.

```{r}
names(child) <- names(child) |>
  str_replace("^X", "")  
names(income) <- names(income) |>
  str_replace("^X", "")
```

**Pivoting each dataset**

Next, we pivot both datasets to a long format, where each observation corresponds to a country, year, and mortality rate/income. This allows us to observe our data by country-year pairs for observations rather than each observation being an independent country.

```{r}
child <- child |>
  pivot_longer(-country, names_to = "year", values_to = "child_mortality") |>
  mutate(year = as.integer(year))

income <- income |>
  pivot_longer(-country, names_to = "year", values_to = "daily_income") |>
  mutate(year = as.integer(year))
```

**Joining the datasets**

We chose to join from child to income which will keep all the countries the child dataset has, but drop those two additional countries' data from Liechtenstein and Holy See.

```{r}
child_income <- child |>
  left_join(income, by = join_by(country, year))
```

**Removing missing values**

Once joined, we will check the data for missing values, as we want each observation to be a complete record of the country, year, mortality rate, and income.

```{r}
child_income |>
  summarise(across(everything(),
                   ~ sum(is.na(.)))) |>
  pivot_longer(cols = everything(),
               names_to = "variable",
               values_to = "missing") |>
  filter(missing > 0) |>
  kable()
```

Let's visualize our missing data by year to figure out any pattern for such missing data.

```{r}
missing_by_year <- child_income |>
  group_by(year) |>
  summarise(
    n_missing_mortality = sum(is.na(child_mortality)),
    n_missing_income = sum(is.na(daily_income)),
    total_countries = n(),
    pct_missing_mortality = round(n_missing_mortality / total_countries * 100, 1),
    pct_missing_income = round(n_missing_income / total_countries * 100, 1)
  )

# Visualize the pattern
missing_by_year |>
  pivot_longer(cols = c(pct_missing_mortality, pct_missing_income),
               names_to = "variable",
               values_to = "percent_missing") |>
  mutate(variable = case_when(
    variable == "pct_missing_mortality" ~ "Child Mortality",
    variable == "pct_missing_income" ~ "Daily Income"
  )) |>
  ggplot(aes(x = year, y = percent_missing, color = variable)) +
  geom_line(linewidth = 1) +
  labs(title = "Missing Data Patterns Over Time",
       x = "Year",
       y = "Percent Missing (%)",
       color = "Variable") +
  theme_minimal() +
  scale_color_brewer(palette = "Set1")
```

It seems like 5% of countries have missing income values up until 1950. These are probably the same countries as the rate is constant at 5%. Let's figure out which countries these are.

```{r}
child_income |>
 filter(is.na(daily_income)) |>
 group_by(country) |>
 summarise(
   lowest_year_missing = min(year),
   highest_year_missing = max(year),
   total_years_missing = n()
 ) |>
 arrange(desc(total_years_missing)) |>
 kable(
   caption = "Countries with Missing Income Data",
   col.names = c("Country", "First Year Missing", "Last Year Missing", "Total Years Missing"),
   align = c("l", "c", "c", "c")
 ) |>
 kable_styling(
   bootstrap_options = c("striped", "hover"),
   full_width = FALSE
 )
```

For each of the countries above (10 countries in total), we have missing values from the years 1800 to 1949 for income. Overall, we have 1500 missing values for income. We will filter out these rows for simplicity's sake, as we cannot predict these values.

```{r}
child_income <- child_income |>
  filter(!is.na(daily_income))
```

**Removing projections**

Since we want the rest of the analysis to be based on actual historical values instead of projections, we will filter out all rows with years past 2024.

```{r}
child_income <- child_income |>
  filter(year <= 2024)
```

**Factor conversion**

```{r}
child_income <- child_income |>
  mutate(country = fct(country))
```

## Data Visualization

In the following visualization, we plot the relationship between average daily household income and child mortality rates across countries. The daily income and child mortality values are aggregated by country over all years (1800-2024). Each point represents a country, with the x-axis showing the average daily income in 2017 U.S. dollars and the y-axis showing the average number of child mortalities per 1000 children.

```{r}
child_income |>
  group_by(country) |>
  summarise(avg_daily_income = mean(daily_income),
            avg_child_mortality = mean(child_mortality)) |>
  ggplot(mapping = aes(x = avg_daily_income,
                       y = avg_child_mortality)) +
  geom_point() +
  labs(title = "Relationship Between Household Income and Child Mortality by Country",
       subtitle = "Average Number of Child Mortalities (per 1000 children)",
       x = "Average Daily Household Income (2017 U.S. Dollars)",
       y = NULL)
```

The plot shows a negative trend, indicating that as average daily income increases, child mortality rates tend to decrease.

To explore how the relationship between daily income and child mortality has changed over time, we created an animated visualization using yearly data. Instead of averaging across all years, this animation shows how income and mortality values per country shift on a year-by-year basis.

```{r}
#| eval: false

# https://gganimate.com/articles/gganimate.html
anim <- child_income |>
  ggplot(mapping = aes(x = daily_income,
                       y = child_mortality)) +
  geom_point(mapping = aes(group = country)) +
  labs(title = "Relationship Between Household Income and Child Mortality by Country (Year {frame_time})",
       subtitle = "Number of Child Mortalities (per 1000 children)",
       x = "Daily Household Income (2017 U.S. Dollars)",
       y = NULL) +
  transition_time(year) +
  ease_aes("linear")

anim_save("income_mortality.gif",
          path = "./animations",
          animation = anim,
          duration = 10,
          width = 1200,
          height = 800,
          res = 144,
          renderer = gifski_renderer())
```

![](./animations/income_mortality.gif)

The animation shows that both income and child mortality rates have changed substantially over time, with many countries experiencing a decrease in income levels and an increase in child mortality. As time progresses, the points shift from a horizontal pattern to a near-vertical pattern, indicating a greater variation in child mortality rates across countries in the present day.

## Linear Regression

We will further analyze the relationship between income and child mortality by fitting a linear regression model. We chose to use median values across all years rather than means because the median is more robust to outliers and extreme values, which one might expect for some countries due to external events (wars increasing child mortality, etc...). Let's begin by plotting the scatterplot of this data, where x is our median daily income value, and y is the median child mortality value.

```{r}
regression_data <- child_income |>
  group_by(country) |>
  summarise(
    median_income = median(daily_income),
    median_mortality = median(child_mortality)
  ) |>
  ungroup()

regression_data |>
  ggplot(aes(x = median_income, y = median_mortality)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(title = "Linear Scale: Income vs Child Mortality",
       subtitle = "Median values across all years (1800-2024)",
       x = "Median Daily Income (2017 USD)",
       y = "Median Child Mortality (per 1000 births)")
```

Looking at the scatter plot, it seems like a log transformation is fitting.

```{r}
regression_data |>
  ggplot(aes(x = median_income, y = median_mortality)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  scale_x_log10() +
  scale_y_log10() +
  annotation_logticks() +
  labs(title = "Log Scale: Income vs Child Mortality",
       subtitle = "Median values across all years (1800-2024)",
       x = "Median Daily Income (2017 USD, log scale)",
       y = "Median Child Mortality (per 1000 births, log scale)")
```

Above, we plotted a better-fitted line, suggesting that a log-log model is much more appropriate for our data. Here are the calculated coefficients for the log-log model:

```{r}
regression_data_log <- regression_data |>
  mutate(
    log_income = log10(median_income),
    log_mortality = log10(median_mortality)
  )
model_log <- lm(log_mortality ~ log_income, data = regression_data_log)

# ChatGPT helped with the tidy output
tidy(model_log, conf.int = TRUE) |>
  mutate(
    term = case_when(
      term == "(Intercept)" ~ "Intercept",
      term == "log_income" ~ "log₁₀(Income)"
    ),
    across(c(estimate, std.error, conf.low, conf.high), ~round(., 4)),
    statistic = round(statistic, 2),
    p.value = format.pval(p.value, digits = 3, eps = 0.001)
  ) |>
  select(term, estimate, std.error, conf.low, conf.high, statistic, p.value) |>
  kable(
    digits=3,
    caption = "Log-Log Regression Model Coefficients",
    col.names = c("Term", "Estimate", "Std. Error", "95% CI Lower", "95% CI Upper", "t-statistic", "p-value"),
    align = c("l", "r", "r", "r", "r", "r", "r")
  ) |>
  kable_styling(
    bootstrap_options = c("striped", "hover"),
    full_width = FALSE,
    position = "center"
  ) |>
  row_spec(0, bold = TRUE, color = "white", background = "#4472C4") |>
  footnote(
    general = paste("R² =", round(summary(model_log)$r.squared, 3), 
                   " | Adjusted R² =", round(summary(model_log)$adj.r.squared, 3)),
    general_title = "Model Fit: "
  )
```

**Variance Table:**

To evaluate how well our regression model explains differences in child mortality, we calculated the variance in the response variable (log-transformed child mortality), the variance in the model’s fitted (predicted) values, and the variance in the residuals (unexplained differences).

```{r}
regression_data_log <- regression_data_log |>
  mutate(
    fitted = fitted(model_log),
    residuals = resid(model_log)
  )

# finding the desired variances
var_y <- var(regression_data_log$log_mortality)
var_fitted <- var(regression_data_log$fitted)
var_resid <- var(regression_data_log$residuals)
r_squared <- var_fitted / var_y


tibble(
  `Variance in log(Mortality)` = var_y,
  `Variance in Fitted Values` = var_fitted,
  `Variance in Residuals` = var_resid,
  `Model R²` = r_squared
) |>
  round(3) |>
  kable(digits = 3, caption = "Model Fit Summary (Log-Log Regression)") |>
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
```

We can see that the total variance in log(mortality) is 0.134, where 0.064 is explained by the log(income) and the other 0.07 is unexplained. Indicating that approximately 47.8% of the variation in child mortality rates across countries can be accounted for by their difference in income.

## Interpretation

Our intercept is 2.493 and our slope is -0.834. For each unit increase in log₁₀(Income), log₁₀(Child Mortality) decreases by 0.834 units.

This negative coefficient is highly statistically significant (p \< 0.001), indicating a strong inverse relationship between income and child mortality.

Overall, the model explains 47.6% of the variance in child mortality rates across countries (R² = 0.476), indicating a strong relationship between income and child mortality. This statistic and extremely low p-values for both coefficients show that this relationship is statistically significant.

## Cross Validation

Cross-validation is a statistical method used to evaluate how well a statistical model will perform on unseen data. In k-fold cross-validation, the dataset is randomly divided into k equal-sized groups (folds). The model is trained on k-1 folds and tested on the remaining fold, and this process is repeated k times, with each fold serving as the test set once. The final performance metric is the average across all k iterations.

For our regression model examining the relationship between median income and median child mortality, we will implement k-fold cross-validation to assess its performance.

```{r}
n_rows <- nrow(regression_data_log)
max_folds <- floor(n_rows / 10)
k <- max_folds
```

With a dataset of `r n_rows` rows, we can use up to `r max_folds` folds to maintain at least 10 observations per fold. We will use k = `r k` folds for our cross-validation, which gives us approximately `r round(n_rows / k, 1)` observations per fold.

```{r}
set.seed(42)

cv_fold <- function(fold_index, data) {
  # split data into train and test sets
  train_data <- data |>
    filter(fold != fold_index)
  test_data <- data |>
    filter(fold == fold_index)
  
  # fit model on training data
  model <- lm(log_mortality ~ log_income, data = train_data)
  
  # make predictions on validation data
  predictions <- predict(model, newdata = test_data)
  
  # calculate R² for fold
  r_squared <- var(predictions) / var(test_data$log_mortality)
  
  return(r_squared)
}

# divide data into folds
regression_data_log <- regression_data_log |>
  mutate(fold = sample(rep_len(1:k, length.out = n_rows),
                       size = n_rows))

# perform k-fold cross-validation
cv_results <- map_dbl(1:k, cv_fold, data = regression_data_log)
cv_results <- tibble(fold = 1:k,
                     r_squared = cv_results)

```

## Cross Validation Analysis

```{r}
mean_cv_r2 <- mean(cv_results$r_squared)

cv_results |>
  ggplot(aes(x = fold, y = r_squared)) +
  geom_point(size = 3, color = "steelblue") +
  geom_hline(aes(yintercept = mean_cv_r2, color = "Mean CV R²"), 
             linetype = "dashed", 
             linewidth = 1) +
  geom_hline(aes(yintercept = 0.626, color = "Original R²"), 
             linetype = "dashed", 
             linewidth = 1) +
  scale_color_manual(name = "Reference Lines: ",
                     values = c("Mean CV R²" = "red", 
                               "Original R²" = "darkgreen")) +
  labs(title = "Cross-Validation R² Values by Fold",
       subtitle = paste("Mean CV R² =", round(mean_cv_r2, 3), "| Original R² = 0.626"),
       x = "Fold",
       y = "R²") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  guides(color = guide_legend(ncol = 1))

# Calculate summary statistics
cv_stats <- cv_results |>
  summarise(
    mean_r2 = round(mean(r_squared), 3),
    sd_r2 = round(sd(r_squared), 3),
    min_r2 = round(min(r_squared), 3),
    max_r2 = round(max(r_squared), 3),
    diff_from_original = round(mean(r_squared) - 0.626, 3)
  )
```

-   **Mean CV R²:** `r cv_stats$mean_r2`
-   **Standard Deviation:** `r cv_stats$sd_r2`
-   **Range:** `r cv_stats$min_r2` to `r cv_stats$max_r2`
-   **Difference from Original R²:** `r cv_stats$diff_from_original`

The cross-validation results show that our model has a mean R² of `r cv_stats$mean_r2` across all folds, which is lower than the original R² of 0.626. This indicates an over-fitted model.

The standard deviation of `r cv_stats$sd_r2` across folds indicates some variability in model performance. With R² values ranging from `r cv_stats$min_r2` to `r cv_stats$max_r2`.

-   In the best case, the model explains `r round(cv_stats$max_r2 * 100, 1)`% of variance.
-   In the worst case, it still explains `r round(cv_stats$min_r2 * 100, 1)`% of variance.

This variability suggests that the income-mortality relationship strength depends significantly on which countries are included, likely reflecting different stages of economic development and healthcare systems. This means that while in the best case, for certain sets of countries, there is a clear relationship between median income and median child mortality, in the worst case, the relationship is much weaker, indicating that the model may not generalize well across all countries.

**Testing Multiple K-Values**

To further assess the generalizability of our model, we extended our k-fold cross-validation procedure by evaluating a **range of k values**. Our initial cross-validation used a single value of k (based on maintaining at least 10 observations per fold), which was 19 folds, we then parameterized this process and tested a range of k values from 2 through 20.

```{r}
run_cv <- function(k, data) {
  n_rows <- nrow(data)
  
  # Shuffle folds
  set.seed(42)
  data <- data |>
    mutate(fold = sample(rep_len(1:k, length.out = n_rows)))
  
  # Cross-validation loop
  cv_results <- map_dbl(1:k, cv_fold, data = data)
  
  # Return average R²
  mean_r2 <- round(mean(cv_results), 3)
  return(mean_r2)
}
```

```{r}
k_values <- c(2,4,6,8,10,12,14,16,18,19,20)
cv_summary <- tibble(
  k = k_values,
  mean_r_squared = map_dbl(k_values, ~run_cv(.x, regression_data_log))
)
cv_summary|>
  kable(caption = "Mean R² from k-Fold Cross-Validation for Different k Values",
        col.names = c("Number of Folds (k)", "Mean R²")) |>
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
```

```{r}
cv_summary |>
  ggplot(aes(x = factor(k), y = mean_r_squared)) +
  geom_col(fill = "steelblue", width = 0.7) +
  geom_hline(yintercept = 0.626, linetype = "dashed", color = "darkgreen", linewidth = 1) +
  geom_text(aes(label = round(mean_r_squared, 3)), vjust = -0.5, size = 3.5) +
  annotate("text", x = Inf, y = 0.626, label = "Original R² = 0.626",
           hjust = 1.1, vjust = -0.5, color = "darkgreen", fontface = "italic", size = 4) +
  labs(
    title = "Mean R² from k-Fold Cross-Validation vs. Original R²",
    x = "Number of Folds (k)",
    y = "Mean CV R²"
  ) +
  ylim(0, 0.7) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    axis.title = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

We can see from the table and graph that our mean R² for **k = 19** remains **0.443**, as previously observed in the single cross-validation analysis. When testing a broader range of k value, from 2 to 20, we found that the highest mean R² occurred at **k = 2** with a value of **0.589**. Despite this increase, all other R² values remained consistently below the original model R² of 0.626, reaffirming that the model is over-fitting when evaluated on the full data set.

These results support our earlier conclusion: the model performs well on the training data but struggles to generalize to new, unseen subsets of countries. While varying the number of folds does have some impact on estimated performance, it does not bring it up enough to change any conclusions.

## Conclusion

Our analysis indicates a strong inverse relationship between a country’s average daily income and its under‐5 mortality rate. Our log‐log regression gives us a slope of –0.834 (p \< 0.001), indicating that a tenfold increase in income corresponds to roughly an 83 % reduction in child mortality, and explains about 48 % of the variance. However, cross‐validation shows some overfitting and considerable variability across country subsets (CV R² ranges from 0.066 to 1.812), suggesting that income alone does not account for all differences. Factors like healthcare infrastructure, education, and sanitation also matter. By focusing on medians and excluding projected values, we focused on making our results reliable, but this approach may have overlooked short‐term fluctuations and excluded very small countries with incomplete early records. Moreover, although increasing income is vital for reducing child deaths, sustained improvements also require strong healthcare systems and social support services.
